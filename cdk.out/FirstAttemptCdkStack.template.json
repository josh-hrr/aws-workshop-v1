{
 "Resources": {
  "LabTopic1C0D8600D": {
   "Type": "AWS::SNS::Topic",
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/LabTopic1/Resource"
   }
  },
  "myBucketLabACCB16F3": {
   "Type": "AWS::S3::Bucket",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/myBucketLab/Resource"
   }
  },
  "myBucketLabNotifications1FF67D30": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "myBucketLabACCB16F3"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "MyNewLambdaEC30E03D",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "myBucketLabAllowBucketNotificationsToFirstAttemptCdkStackMyNewLambdaA211065F6D3A710C"
   ],
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/myBucketLab/Notifications/Resource"
   }
  },
  "myBucketLabAllowBucketNotificationsToFirstAttemptCdkStackMyNewLambdaA211065F6D3A710C": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "MyNewLambdaEC30E03D",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "myBucketLabACCB16F3",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/myBucketLab/AllowBucketNotificationsToFirstAttemptCdkStackMyNewLambdaA211065F"
   }
  },
  "MyNewLambdaServiceRole2A6730F7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/MyNewLambda/ServiceRole/Resource"
   }
  },
  "MyNewLambdaServiceRoleDefaultPolicyA8C3E635": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "sns:Publish",
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "LabTopic1C0D8600D"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MyNewLambdaServiceRoleDefaultPolicyA8C3E635",
    "Roles": [
     {
      "Ref": "MyNewLambdaServiceRole2A6730F7"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/MyNewLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "MyNewLambdaEC30E03D": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "5ae8a11721a93aded61a929cdc95e51fdf65ca4bad51aa49331330d240056f6a.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "FunctionName": "cds-session-workshop",
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "MyNewLambdaServiceRole2A6730F7",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "MyNewLambdaServiceRoleDefaultPolicyA8C3E635",
    "MyNewLambdaServiceRole2A6730F7"
   ],
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/MyNewLambda/Resource",
    "aws:asset:path": "asset.5ae8a11721a93aded61a929cdc95e51fdf65ca4bad51aa49331330d240056f6a",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\r\nimport json\r\nimport logging\r\nimport urllib.request\r\n\r\ns3 = boto3.client(\"s3\")\r\n\r\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\r\n\r\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\r\n\r\ndef handler(event: dict, context):\r\n  response_status = \"SUCCESS\"\r\n  error_message = \"\"\r\n  try:\r\n    props = event[\"ResourceProperties\"]\r\n    bucket = props[\"BucketName\"]\r\n    notification_configuration = props[\"NotificationConfiguration\"]\r\n    request_type = event[\"RequestType\"]\r\n    managed = props.get('Managed', 'true').lower() == 'true'\r\n    stack_id = event['StackId']\r\n\r\n    if managed:\r\n      config = handle_managed(request_type, notification_configuration)\r\n    else:\r\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\r\n\r\n    put_bucket_notification_configuration(bucket, config)\r\n  except Exception as e:\r\n    logging.exception(\"Failed to put bucket notification configuration\")\r\n    response_status = \"FAILED\"\r\n    error_message = f\"Error: {str(e)}. \"\r\n  finally:\r\n    submit_response(event, context, response_status, error_message)\r\n\r\ndef handle_managed(request_type, notification_configuration):\r\n  if request_type == 'Delete':\r\n    return {}\r\n  return notification_configuration\r\n\r\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\r\n\r\n  external_notifications = find_external_notifications(bucket, stack_id)\r\n\r\n\r\n  if request_type == 'Delete':\r\n    return external_notifications\r\n\r\n  def with_id(notification):\r\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\r\n    return notification\r\n\r\n\r\n  notifications = {}\r\n  for t in CONFIGURATION_TYPES:\r\n    external = external_notifications.get(t, [])\r\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\r\n    notifications[t] = external + incoming\r\n\r\n\r\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\r\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\r\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\r\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\r\n\r\n  return notifications\r\n\r\ndef find_external_notifications(bucket, stack_id):\r\n  existing_notifications = get_bucket_notification_configuration(bucket)\r\n  external_notifications = {}\r\n  for t in CONFIGURATION_TYPES:\r\n\r\n\r\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\r\n\r\n\r\n\r\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\r\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\r\n\r\n  return external_notifications\r\n\r\ndef get_bucket_notification_configuration(bucket):\r\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\r\n\r\ndef put_bucket_notification_configuration(bucket, notification_configuration):\r\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\r\n\r\ndef submit_response(event: dict, context, response_status: str, error_message: str):\r\n  response_body = json.dumps(\r\n    {\r\n      \"Status\": response_status,\r\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\r\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\r\n      \"StackId\": event[\"StackId\"],\r\n      \"RequestId\": event[\"RequestId\"],\r\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\r\n      \"NoEcho\": False,\r\n    }\r\n  ).encode(\"utf-8\")\r\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\r\n  try:\r\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\r\n    with urllib.request.urlopen(req) as response:\r\n      print(response.read().decode(\"utf-8\"))\r\n    print(\"Status code: \" + response.reason)\r\n  except Exception as e:\r\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\r\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/z2QzQ7CIBCEn8U7Xa0e1KM18WiMem+Qrs22FEyXagzpuwtUPc3HzpD9WcI2h8VMvjhTVZtpuoG/OKlaEUqlZ8Pgr/ZBSuzvJsEoeAW+GFSLLha/NEkhGUehZXerJPjgnrDviJmsidnDYJQL/IuUxlbYMByT/FxBsgN/thrjn6Qnq0m943OiOEQpmdEx7KKMKYpsh16h+EPywj41mTom9tZUNE0QW0PD82e+gXwdbtAwUdYPxlGHcJ70A4JCc2sfAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "FirstAttemptCdkStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}